# -*- coding: utf-8 -*-
"""SLP_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mzmaaoy2pPNea_o2IK5U-1AZcy648a1J
"""

from google.colab import drive
drive.mount('/content/drive')

import os

training_data_path = '/content/drive/My Drive/Spoken/training_data'
testing_data_path = '/content/drive/My Drive/Spoken/testing_data'

!pip install librosa
!pip install resampy

import librosa
import resampy
import numpy as np
import os
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

import os
import glob

def load_audio_files(base_path):
    features = []
    labels = []
    accents = ['Hebron', 'Jerusalem', 'Nablus', 'Ramallah_Reef']

    for accent in accents:
        folder_path = os.path.join(base_path, accent)
        for file_path in glob.glob(os.path.join(folder_path, '*.wav')):
            y, sr = librosa.load(file_path, sr=None)
            mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=20)
            mfccs_mean = np.mean(mfccs, axis=1)
            features.append(mfccs_mean)
            labels.append(accent)

    print(f"Loaded {len(features)} samples from {base_path}")
    return np.array(features), np.array(labels)

# Load training and testing data
X_train, y_train = load_audio_files(training_data_path)
X_test, y_test = load_audio_files(testing_data_path)

print(f"Unique labels in training data: {np.unique(y_train)}")
print(f"Unique labels in testing data: {np.unique(y_test)}")

# Print statement to check if the model takes all data
# Talk about "- and _" problem
print("Training labels distribution:", np.unique(y_train, return_counts=True))
print("Testing labels distribution:", np.unique(y_test, return_counts=True))

print(f"Training data path: {training_data_path}")
print(f"Testing data path: {testing_data_path}")

# List files in the directories to ensure they are accessible
print("Training data files:", os.listdir(training_data_path))
print("Testing data files:", os.listdir(testing_data_path))


# Load and preprocess the data
X_train, y_train = load_audio_files(training_data_path)
X_test, y_test = load_audio_files(testing_data_path)

#  Print X_train, y_train, X_test, and y_test with the number of samples to ensure if the paths and files are correct
print(f"Loaded {len(X_train)} training samples and {len(X_test)} testing samples")

from sklearn.svm import SVC
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt
import pickle
# Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Use Grid Search to find the best parameters for SVM
param_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf'], 'class_weight': ['balanced']}
grid_search = GridSearchCV(SVC(), param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Get the best model from Grid Search
best_svm = grid_search.best_estimator_

# Evaluate the model
y_pred = best_svm.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Plot the confusion matrix and the classification report
cm = confusion_matrix(y_test, y_pred, labels=best_svm.classes_)
sns.heatmap(cm, annot=True, fmt='d', xticklabels=best_svm.classes_, yticklabels=best_svm.classes_,cmap='binary', linewidths=1)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Save the trained model and scaler for future use
with open('best_svm_model.pkl', 'wb') as model_file:
    pickle.dump(best_svm, model_file)
with open('scaler.pkl', 'wb') as scaler_file:
    pickle.dump(scaler, scaler_file)

# Function that predict the accent of a new audio file
def predict_accent(audio_path):
    y, sr = librosa.load(audio_path, sr=None)
    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=20)
    mfccs_mean = np.mean(mfccs, axis=1).reshape(1, -1)
    mfccs_scaled = scaler.transform(mfccs_mean)
    predicted_accent = best_svm.predict(mfccs_scaled)
    return predicted_accent[0]

print(classification_report(y_test, y_pred, target_names=best_svm.classes_))

# To give examples out of the testing data
test_audio_path = '/content/hebron_test1.mp3'
predicted_accent = predict_accent(test_audio_path)
print(f'The predicted accent for the test audio is: {predicted_accent}')